// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// afBpDiffCdf
SEXP afBpDiffCdf(NumericVector a, NumericVector b, NumericVector gen, List paramsList);
RcppExport SEXP _fluodilution_afBpDiffCdf(SEXP aSEXP, SEXP bSEXP, SEXP genSEXP, SEXP paramsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gen(genSEXP);
    Rcpp::traits::input_parameter< List >::type paramsList(paramsListSEXP);
    rcpp_result_gen = Rcpp::wrap(afBpDiffCdf(a, b, gen, paramsList));
    return rcpp_result_gen;
END_RCPP
}
// modelBranchingInit
SEXP modelBranchingInit(const List params, int startPop, int Gm, NumericVector times, const NumericMatrix initial, bool verbose);
RcppExport SEXP _fluodilution_modelBranchingInit(SEXP paramsSEXP, SEXP startPopSEXP, SEXP GmSEXP, SEXP timesSEXP, SEXP initialSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< int >::type startPop(startPopSEXP);
    Rcpp::traits::input_parameter< int >::type Gm(GmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(modelBranchingInit(params, startPop, Gm, times, initial, verbose));
    return rcpp_result_gen;
END_RCPP
}
// modelBranchingRelease
void modelBranchingRelease(SEXP obj);
RcppExport SEXP _fluodilution_modelBranchingRelease(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    modelBranchingRelease(obj);
    return R_NilValue;
END_RCPP
}
// modelBranching
List modelBranching(const List params, SEXP obj);
RcppExport SEXP _fluodilution_modelBranching(SEXP paramsSEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(modelBranching(params, obj));
    return rcpp_result_gen;
END_RCPP
}
// cytonConv
NumericVector cytonConv(NumericVector x, NumericVector y);
RcppExport SEXP _fluodilution_cytonConv(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(cytonConv(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fluodilution_afBpDiffCdf", (DL_FUNC) &_fluodilution_afBpDiffCdf, 4},
    {"_fluodilution_modelBranchingInit", (DL_FUNC) &_fluodilution_modelBranchingInit, 6},
    {"_fluodilution_modelBranchingRelease", (DL_FUNC) &_fluodilution_modelBranchingRelease, 1},
    {"_fluodilution_modelBranching", (DL_FUNC) &_fluodilution_modelBranching, 2},
    {"_fluodilution_cytonConv", (DL_FUNC) &_fluodilution_cytonConv, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fluodilution(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
