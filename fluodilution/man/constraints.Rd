% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cstr.R
\name{constraints}
\alias{constraints}
\alias{cstrlist}
\alias{fixcstr}
\alias{catcstr}
\title{Constrain some parameters to specific values.}
\usage{
cstrlist(constraints = NULL, start = NULL, lower = NULL, upper = NULL)

fixcstr(cstr, fit, before = TRUE)

catcstr(..., drop = TRUE)
}
\arguments{
\item{constraints}{A set of constraints (format detailed below) that should
apply to the starting parameters in an optimization, the lower and upper
bounds and the result of the optimization.}

\item{start}{A set of constraints that apply only to the starting parameters.}

\item{lower}{A set of constraints that apply only to the lower bounds.}

\item{upper}{A set of constraints that apply only to the upper bounds.}

\item{cstr}{A set of constraints (format detailed below) or a \code{cstrlist}
object.}

\item{fit}{Either an object the \code{\link[stats]{coef}} method can be used
with (e.g., the result of \code{nls}) or a named vector of coefficients.}

\item{before}{Whether the new constraining should apply before (default) or
after the current constraining.}

\item{...}{Constraints (or lists of constraints) to "concatenate" together.
The leftmost is concatenated before the rightmost and thus would apply
before.  If lists are given, they are "combinatorially" concatenated (as
with a Cartesian product).}

\item{drop}{If the returned list of constraints have only one element, return
this element instead of a one-element list.}
}
\value{
\code{makecstr} returns a \code{cstrlist} object suitable for use
  with, e.g., \code{\link{fd_model}}.  \code{fixcstr} returns either the new
  set of constraints or a \code{cstrlist} object, depending on the type of
  argument \code{cstr}.  \code{catcstr} returns the resulting concatenation
  (a new set of constraints).
}
\description{
Fully-fledged fluorescence dilution models feature a large amount of
parameters, not all of which are practically identifiable to an acceptable
degree.  Therefore, it is important to constrain them: for instance, by
requiring that a gamma distribution should have a coefficient of variation of
1, turning it into an exponential distribution, or that different
compartments share the same time to division.  We devised a set of tools to
help this constraining.
}
\details{
\code{cstrlist} is used to bring together the specification of overall
constraints and the starting values and lower and upper bounds (they are also
given using constraints).  The result can be used with, e.g.,
\code{\link{fd_model}}.  \code{fixcstr} is an alternative way to constructing
constraints: it returns the original set of constraints augmented by the
fixing of some of the parameters to the values found in \code{fit}.
\code{catcstr} is used to concatenate together an arbitrary number of
constraints (it does not work on a \code{cstrlist} object).
}
\section{Constraint format}{

In EBNF,
\preformatted{
   constraint ::= [ term [ '+' ] constraint ]
         term ::= [ prefix ':' ] '{' assignments '}'
                | name
                | 'NULL'
                | [ prefix ':' ] '(' constraint ')'
       prefix ::= prefix_atom [ ':' prefix ]
  prefix_atom ::= language
                | '(' language {'/' language} ')'
  assignments ::= language '<-' (language | '..free..')
                  [ ';' assignments ]}

This format is specifically tailored to constraining the value of nested
lists with structures that are somewhat "parallel".  For instance, in
fluorescence dilution, the parameters for the two-tier model are structured
as a list with two elements, \code{fmm} (parameters for the finite mixture
model) and \code{pro} (parameters for the proliferation model). \code{pro} is
structured as a named list, with each element giving the parameters for a
specific compartment, in their flow order. In turn, each compartment is
parametrized by gamma distributions, which are represented as lists of three
elements (a detailed account of this structure is given in
\code{\link{proliferation}}, and for FMM in \code{\link{finite-mixture}}).
Therefore, the constraining can be "packed" more efficiently, benefiting from
this "parallel" organization.

In the end, with nested lists,
constraining a set of parameters \code{params} amount to using such
expressions:
\verb{
}\code{params$pro$One$f0$delta <- 1}.

Such a constraining can be written in our format as
\code{pro:One:f0:{delta <- 1}} or
alternatively \code{pro:One:{f0$delta <- 1}}: the left-hand side is
simply prefixed.

To make expressions lighter, it is possible to combine
\verb{
}\code{params$pro$One$f0$delta <- 1; params$pro$One$g0$delta <- 1}
\verb{
} into \code{pro:One:(f0/g0):{delta <- 1}}.

For the proliferation model, the \code{all} prefix is expanded:
for three compartments \code{One}, \code{Two} and \code{Three},
\code{pro:all:(f0/g0):{delta <- 1}} expands into
\code{pro:(One/Two/Three):(f0/g0):{delta <- 1}}.

It is also possible to set more than one parameter inside the brackets:
\verb{
}\code{pro:all:f0:{delta <- 1; ss <- 0.5}}.

Previously constrained parameters can be "unconstrained" and constraints
linked together
using \code{+}:
\code{pro:all:f0:{delta <- 1; ss <- 0.5} +
pro:One:f0:{delta <- ..free..}}.

A parameter that has been previously freed can be constrained again:
\preformatted{pro:all:f0:{delta <- 1; ss <- 0.5} +
pro:One:f0:{delta <- ..free..} +
pro:one:f0:{delta <- 0.5}}
and in general the rightmost value prevails.  For instance,
in the following \code{delta} is constrained to \code{0.5} in
compartment \code{One}
but to \code{1} in every other compartment:
\verb{
}\code{pro:all:f0:{delta <- 1; ss <- 0.5} +
pro:One:f0:{delta <- 0.5}}.

To bind parameters together, it is possible to use the special
placeholders \code{.L1}
(stands for the list containing the left-hand parameter in the assignment),
\code{.L2} (the list just above) and \code{.L3} (one additional level up).
For example,
to bind probabilities together one can write
\code{pro:all:{p0 <- .L1$p}},
to bind distributions inside the same compartment
\verb{
}\code{pro:all:{f0$mm <- .L2$f$mm}} or \code{pro:all:f0:{mm <- .L2$f$mm}}
\verb{
} and
to bind distributions across compartments
\verb{
}\code{pro:all:{f$mm <- .L3$One$f$mm} + pro:One:f:{mm <- ..free..}}.

When a term is a name beginning with \code{#} or in the form
\code{listname$name}, it is expanded in the
global environment:
for instance, if \code{`#noss`}
is defined in the global environment as
\verb{
}\code{`#noss` <- ~ pro:all:(f0/g0/f/g):{ss <- 0.5}},
\verb{
} then
\code{`#noss` + pro:One:(f0/g0):{delta <- 1}} is expanded to
\verb{
}\code{pro:all:(f0/g0/f/g):{ss <- 0.5} + pro:One:(f0/g0):{delta <- 1}}
(see the \emph{examples} section for more).

Notice also that
a tilde \code{~} is used to indicate \emph{R} not to evaluate the expression
on the right of it
(it is a valid formula but not a meaningful statement).

We believe that this format offers a very powerful, flexible and terse
approach to constraining complex and large nonlinear models.  It has
applications well
beyond the realm of fluorescence dilution.
}

\examples{
# Constrain all 'delta' to be 1
`#c1` <- ~ pro:all:(f/g/f0/g0):{delta <- 1}

# It is also possible to use a set of often-used constraints
CC <<- FdCommonConstraints

# The constrains can be combined together in two different ways
`#c2` <- ~ `#c1` + CC$`#delta_1111`
`#c3` <- catcstr(`#c2`, CC$`#noss`, ~ pro:all:{p0 <- .L1$p})

# Starting parameters and lower/upper bounds are also
# specified using constraints
cstrlist(constraints = `#c3`,
         start = ~ pro:all:{p <- 0.5},
         lower = ~ pro:all:{p <- 0.1},
         upper = ~ pro:all:{p <- 0.95})

# An alternative way to constructing constraints uses 'fixcstr'
`#c4` <- fixcstr(`#c3`, c(pro.One.f.mm = 5))

# Finally, previously constrained parameters can be freed
`#c5` <- ~ `#c3` + pro:all:{p0 <- ..free..}

}
\seealso{
\code{\link{finite-mixture}}, \code{\link{proliferation}},
\code{\link{fd_model}}.
}
